// <auto-generated />
using System;
using Manage_Receive_Issues_Goods.Data;
using Manage_Receive_Issues_Goods.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Manage_Receive_Issues_Goods.Data.Migrations
{
    [DbContext(typeof(RigContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualreceived", b =>
                {
                    b.Property<int>("ActualReceivedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActualReceivedID");

                    b.Property<DateTime>("ActualDeliveryTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ActualLeadTime")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("ScheduleID");

                    b.HasKey("ActualReceivedId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ScheduleId" }, "ScheduleID");

                    b.ToTable("actualreceived");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualsissuestlip", b =>
                {
                    b.Property<int>("ActualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActualID");

                    b.Property<DateTime>("ActualTime")
                        .HasColumnType("datetime");

                    b.Property<int>("PlanDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PlanDetailID");

                    b.HasKey("ActualId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlanDetailId" }, "PlanDetailID");

                    b.ToTable("actualsissuestlip");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualsreceivedenso", b =>
                {
                    b.Property<int>("ActualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActualID");

                    b.Property<DateTime>("ActualTime")
                        .HasColumnType("datetime");

                    b.Property<int>("PlanDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PlanDetailID");

                    b.HasKey("ActualId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlanDetailId" }, "PlanDetailID")
                        .HasDatabaseName("PlanDetailID1");

                    b.ToTable("actualsreceivedenso");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Planritd", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasColumnType("enum('Received','Issued')");

                    b.Property<int>("TotalShipment")
                        .HasColumnType("int");

                    b.HasKey("PlanId")
                        .HasName("PRIMARY");

                    b.ToTable("planritd");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Planritddetail", b =>
                {
                    b.Property<int>("PlanDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanDetailID");

                    b.Property<string>("PlanDetailName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<TimeOnly>("PlanTime")
                        .HasColumnType("time");

                    b.Property<int?>("StatusIssueId")
                        .HasColumnType("int")
                        .HasColumnName("StatusIssueID");

                    b.Property<int?>("StatusReceiveId")
                        .HasColumnType("int")
                        .HasColumnName("StatusReceiveID");

                    b.HasKey("PlanDetailId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlanId" }, "PlanID");

                    b.HasIndex(new[] { "StatusIssueId" }, "StatusIssueID");

                    b.HasIndex(new[] { "StatusReceiveId" }, "StatusReceiveID");

                    b.ToTable("planritddetails");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Schedulereceived", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScheduleID");

                    b.Property<int>("DeliveryTimeId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryTimeID");

                    b.Property<int>("LeadTime")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<int>("WeekdayId")
                        .HasColumnType("int")
                        .HasColumnName("WeekdayID");

                    b.HasKey("ScheduleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DeliveryTimeId" }, "DeliveryTimeID");

                    b.HasIndex(new[] { "SupplierId" }, "SupplierID");

                    b.HasIndex(new[] { "WeekdayId" }, "WeekdayID");

                    b.ToTable("schedulereceived");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Statusesritd", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("enum('Pending','In Transit','Delivered','Received')");

                    b.HasKey("StatusId")
                        .HasName("PRIMARY");

                    b.ToTable("statusesritd");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SupplierId")
                        .HasName("PRIMARY");

                    b.ToTable("supplier");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Time", b =>
                {
                    b.Property<int>("TimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TimeID");

                    b.Property<TimeOnly>("Time1")
                        .HasColumnType("time")
                        .HasColumnName("Time");

                    b.HasKey("TimeId")
                        .HasName("PRIMARY");

                    b.ToTable("time");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Weekday", b =>
                {
                    b.Property<int>("WeekdayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WeekdayID");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WeekdayId")
                        .HasName("PRIMARY");

                    b.ToTable("weekday");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualreceived", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Schedulereceived", "Schedule")
                        .WithMany("Actualreceiveds")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("actualreceived_ibfk_1");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualsissuestlip", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Planritddetail", "PlanDetail")
                        .WithMany("Actualsissuestlips")
                        .HasForeignKey("PlanDetailId")
                        .IsRequired()
                        .HasConstraintName("actualsissuestlip_ibfk_1");

                    b.Navigation("PlanDetail");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualsreceivedenso", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Planritddetail", "PlanDetail")
                        .WithMany("Actualsreceivedensos")
                        .HasForeignKey("PlanDetailId")
                        .IsRequired()
                        .HasConstraintName("actualsreceivedenso_ibfk_1");

                    b.Navigation("PlanDetail");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Planritddetail", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Planritd", "Plan")
                        .WithMany("Planritddetails")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("planritddetails_ibfk_1");

                    b.HasOne("Manage_Receive_Issues_Goods.Models.Statusesritd", "StatusIssue")
                        .WithMany("PlanritddetailStatusIssues")
                        .HasForeignKey("StatusIssueId")
                        .HasConstraintName("planritddetails_ibfk_3");

                    b.HasOne("Manage_Receive_Issues_Goods.Models.Statusesritd", "StatusReceive")
                        .WithMany("PlanritddetailStatusReceives")
                        .HasForeignKey("StatusReceiveId")
                        .HasConstraintName("planritddetails_ibfk_2");

                    b.Navigation("Plan");

                    b.Navigation("StatusIssue");

                    b.Navigation("StatusReceive");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Schedulereceived", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Time", "DeliveryTime")
                        .WithMany("Schedulereceiveds")
                        .HasForeignKey("DeliveryTimeId")
                        .IsRequired()
                        .HasConstraintName("schedulereceived_ibfk_2");

                    b.HasOne("Manage_Receive_Issues_Goods.Models.Supplier", "Supplier")
                        .WithMany("Schedulereceiveds")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("schedulereceived_ibfk_1");

                    b.HasOne("Manage_Receive_Issues_Goods.Models.Weekday", "Weekday")
                        .WithMany("Schedulereceiveds")
                        .HasForeignKey("WeekdayId")
                        .IsRequired()
                        .HasConstraintName("schedulereceived_ibfk_3");

                    b.Navigation("DeliveryTime");

                    b.Navigation("Supplier");

                    b.Navigation("Weekday");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Planritd", b =>
                {
                    b.Navigation("Planritddetails");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Planritddetail", b =>
                {
                    b.Navigation("Actualsissuestlips");

                    b.Navigation("Actualsreceivedensos");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Schedulereceived", b =>
                {
                    b.Navigation("Actualreceiveds");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Statusesritd", b =>
                {
                    b.Navigation("PlanritddetailStatusIssues");

                    b.Navigation("PlanritddetailStatusReceives");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Supplier", b =>
                {
                    b.Navigation("Schedulereceiveds");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Time", b =>
                {
                    b.Navigation("Schedulereceiveds");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Weekday", b =>
                {
                    b.Navigation("Schedulereceiveds");
                });
#pragma warning restore 612, 618
        }
    }
}
