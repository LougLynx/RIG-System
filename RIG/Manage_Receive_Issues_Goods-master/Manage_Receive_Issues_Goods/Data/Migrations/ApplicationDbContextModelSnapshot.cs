// <auto-generated />
using System;
using Manage_Receive_Issues_Goods.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Manage_Receive_Issues_Goods.Data.Migrations
{
    [DbContext(typeof(RigContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("AspnetroleAspnetuser", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("AspnetroleAspnetuser");
                });

            modelBuilder.Entity("Aspnetuserrole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("aspnetuserroles", (string)null);
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualdetailtlip", b =>
                {
                    b.Property<int>("ActualDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActualDetailID");

                    b.Property<int>("ActualReceivedId")
                        .HasColumnType("int")
                        .HasColumnName("ActualReceivedID");

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityRemain")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityScan")
                        .HasColumnType("int");

                    b.Property<string>("StockInLocation")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("StockInStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("ActualDetailId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ActualReceivedId" }, "ActualReceivedID");

                    b.ToTable("actualdetailtlip");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualreceivedtlip", b =>
                {
                    b.Property<int>("ActualReceivedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActualReceivedID");

                    b.Property<DateTime>("ActualDeliveryTime")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("ActualLeadTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("ActualStorageTime")
                        .HasColumnType("time");

                    b.Property<string>("AsnNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AsnNumber"), "utf8mb3");

                    b.Property<string>("DoNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Invoice")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SupplierCode"), "utf8mb3");

                    b.Property<string>("TagName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ActualReceivedId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlanId" }, "FK_actualreceivedtlip_planreceivetlip");

                    b.HasIndex(new[] { "SupplierCode" }, "SupplierCode");

                    b.ToTable("actualreceivedtlip");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualsissuetlip", b =>
                {
                    b.Property<int>("ActualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActualID");

                    b.Property<DateTime?>("ActualTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("PlanDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PlanDetailID");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("ActualId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlanDetailId" }, "PlanDetailID");

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("actualsissuetlip");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualsreceivedenso", b =>
                {
                    b.Property<int>("ActualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActualID");

                    b.Property<DateTime?>("ActualTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("PlanDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PlanDetailID");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("ActualId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlanDetailId" }, "PlanDetailID")
                        .HasDatabaseName("PlanDetailID1");

                    b.HasIndex(new[] { "UserId" }, "UserId")
                        .HasDatabaseName("UserId1");

                    b.ToTable("actualsreceivedenso");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Aspnetrole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex1");

                    b.ToTable("aspnetroles");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Aspnetroleclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("aspnetroleclaims");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Aspnetuser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex")
                        .HasDatabaseName("EmailIndex1");

                    b.HasIndex(new[] { "EmployeeCode" }, "EmployeeCode")
                        .IsUnique();

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex1");

                    b.ToTable("aspnetusers");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Aspnetuserclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("aspnetuserclaims");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Aspnetuserlogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("aspnetuserlogins");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Aspnetusertoken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("aspnetusertokens");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Historyplanreceivedtlip", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HistoryID");

                    b.Property<int?>("ActualReceivedId")
                        .HasColumnType("int")
                        .HasColumnName("ActualReceivedID");

                    b.Property<DateOnly?>("HistoryDate")
                        .HasColumnType("date");

                    b.Property<int?>("PlanDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PlanDetailID");

                    b.HasKey("HistoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ActualReceivedId" }, "ActualReceivedID")
                        .HasDatabaseName("ActualReceivedID1");

                    b.HasIndex(new[] { "PlanDetailId" }, "PlanDetailID")
                        .HasDatabaseName("PlanDetailID2");

                    b.ToTable("historyplanreceivedtlip");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Plandetailreceivedtlip", b =>
                {
                    b.Property<int>("PlanDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanDetailID");

                    b.Property<TimeOnly>("DeliveryTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("LeadTime")
                        .HasColumnType("time");

                    b.Property<int?>("OccurrencesPerMonth")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasColumnType("enum('Weekly','Monthly','Bi-Monthly')");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SupplierCode"), "utf8mb3");

                    b.Property<string>("TagName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("WeekOfMonth")
                        .HasColumnType("int");

                    b.Property<int>("WeekdayId")
                        .HasColumnType("int")
                        .HasColumnName("WeekdayID");

                    b.HasKey("PlanDetailId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlanId" }, "PlanID");

                    b.HasIndex(new[] { "SupplierCode" }, "SupplierCode")
                        .HasDatabaseName("SupplierCode1");

                    b.HasIndex(new[] { "WeekdayId" }, "WeekdayID");

                    b.ToTable("plandetailreceivedtlip");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Planrdtd", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TotalShipment")
                        .HasColumnType("int");

                    b.HasKey("PlanId")
                        .HasName("PRIMARY");

                    b.ToTable("planrdtd");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Planrdtddetail", b =>
                {
                    b.Property<int>("PlanDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanDetailID");

                    b.Property<string>("PlanDetailName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<TimeOnly?>("PlanTimeIssued")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("PlanTimeReceived")
                        .HasColumnType("time");

                    b.HasKey("PlanDetailId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlanId" }, "PlanID")
                        .HasDatabaseName("PlanID1");

                    b.ToTable("planrdtddetails");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Planreceivetlip", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("PlanId")
                        .HasName("PRIMARY");

                    b.ToTable("planreceivetlip");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Supplier", b =>
                {
                    b.Property<string>("SupplierCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SupplierCode"), "utf8mb3");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SupplierCode")
                        .HasName("PRIMARY");

                    b.ToTable("supplier");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Tagnamereceivetlip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tagnamereceivetlip");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Weekday", b =>
                {
                    b.Property<int>("WeekdayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WeekdayID");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WeekdayId")
                        .HasName("PRIMARY");

                    b.ToTable("weekday");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_AspNetRoleClaims_RoleId1");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AspNetUserClaims_UserId1");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AspNetUserLogins_UserId1");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_AspNetUserRoles_RoleId1");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Aspnetuserrole", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Aspnetrole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId");

                    b.HasOne("Manage_Receive_Issues_Goods.Models.Aspnetuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers_UserId");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualdetailtlip", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Actualreceivedtlip", "ActualReceived")
                        .WithMany("Actualdetailtlips")
                        .HasForeignKey("ActualReceivedId")
                        .IsRequired()
                        .HasConstraintName("actualdetailtlip_ibfk_1");

                    b.Navigation("ActualReceived");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualreceivedtlip", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Planreceivetlip", "Plan")
                        .WithMany("Actualreceivedtlips")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("FK_actualreceivedtlip_planreceivetlip");

                    b.HasOne("Manage_Receive_Issues_Goods.Models.Supplier", "SupplierCodeNavigation")
                        .WithMany("Actualreceivedtlips")
                        .HasForeignKey("SupplierCode")
                        .IsRequired()
                        .HasConstraintName("actualreceivedtlip_ibfk_1");

                    b.Navigation("Plan");

                    b.Navigation("SupplierCodeNavigation");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualsissuetlip", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Planrdtddetail", "PlanDetail")
                        .WithMany("Actualsissuetlips")
                        .HasForeignKey("PlanDetailId")
                        .HasConstraintName("actualsissuetlip_ibfk_1");

                    b.HasOne("Manage_Receive_Issues_Goods.Models.Aspnetuser", "User")
                        .WithMany("Actualsissuetlips")
                        .HasForeignKey("UserId")
                        .HasConstraintName("actualsissuetlip_ibfk_2");

                    b.Navigation("PlanDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualsreceivedenso", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Planrdtddetail", "PlanDetail")
                        .WithMany("Actualsreceivedensos")
                        .HasForeignKey("PlanDetailId")
                        .HasConstraintName("actualsreceivedenso_ibfk_1");

                    b.HasOne("Manage_Receive_Issues_Goods.Models.Aspnetuser", "User")
                        .WithMany("Actualsreceivedensos")
                        .HasForeignKey("UserId")
                        .HasConstraintName("actualsreceivedenso_ibfk_2");

                    b.Navigation("PlanDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Aspnetroleclaim", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Aspnetrole", "Role")
                        .WithMany("Aspnetroleclaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Aspnetuserclaim", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Aspnetuser", "User")
                        .WithMany("Aspnetuserclaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserClaims_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Aspnetuserlogin", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Aspnetuser", "User")
                        .WithMany("Aspnetuserlogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserLogins_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Aspnetusertoken", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Aspnetuser", "User")
                        .WithMany("Aspnetusertokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserTokens_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Historyplanreceivedtlip", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Actualreceivedtlip", "ActualReceived")
                        .WithMany("Historyplanreceivedtlips")
                        .HasForeignKey("ActualReceivedId")
                        .HasConstraintName("historyplanreceivedtlip_ibfk_2");

                    b.HasOne("Manage_Receive_Issues_Goods.Models.Plandetailreceivedtlip", "PlanDetail")
                        .WithMany("Historyplanreceivedtlips")
                        .HasForeignKey("PlanDetailId")
                        .HasConstraintName("historyplanreceivedtlip_ibfk_1");

                    b.Navigation("ActualReceived");

                    b.Navigation("PlanDetail");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Plandetailreceivedtlip", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Planreceivetlip", "Plan")
                        .WithMany("Plandetailreceivedtlips")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("plandetailreceivedtlip_ibfk_3");

                    b.HasOne("Manage_Receive_Issues_Goods.Models.Supplier", "SupplierCodeNavigation")
                        .WithMany("Plandetailreceivedtlips")
                        .HasForeignKey("SupplierCode")
                        .IsRequired()
                        .HasConstraintName("plandetailreceivedtlip_ibfk_1");

                    b.HasOne("Manage_Receive_Issues_Goods.Models.Weekday", "Weekday")
                        .WithMany("Plandetailreceivedtlips")
                        .HasForeignKey("WeekdayId")
                        .IsRequired()
                        .HasConstraintName("plandetailreceivedtlip_ibfk_2");

                    b.Navigation("Plan");

                    b.Navigation("SupplierCodeNavigation");

                    b.Navigation("Weekday");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Planrdtddetail", b =>
                {
                    b.HasOne("Manage_Receive_Issues_Goods.Models.Planrdtd", "Plan")
                        .WithMany("Planrdtddetails")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("planrdtddetails_ibfk_1");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Actualreceivedtlip", b =>
                {
                    b.Navigation("Actualdetailtlips");

                    b.Navigation("Historyplanreceivedtlips");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Aspnetrole", b =>
                {
                    b.Navigation("Aspnetroleclaims");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Aspnetuser", b =>
                {
                    b.Navigation("Actualsissuetlips");

                    b.Navigation("Actualsreceivedensos");

                    b.Navigation("Aspnetuserclaims");

                    b.Navigation("Aspnetuserlogins");

                    b.Navigation("Aspnetusertokens");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Plandetailreceivedtlip", b =>
                {
                    b.Navigation("Historyplanreceivedtlips");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Planrdtd", b =>
                {
                    b.Navigation("Planrdtddetails");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Planrdtddetail", b =>
                {
                    b.Navigation("Actualsissuetlips");

                    b.Navigation("Actualsreceivedensos");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Planreceivetlip", b =>
                {
                    b.Navigation("Actualreceivedtlips");

                    b.Navigation("Plandetailreceivedtlips");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Supplier", b =>
                {
                    b.Navigation("Actualreceivedtlips");

                    b.Navigation("Plandetailreceivedtlips");
                });

            modelBuilder.Entity("Manage_Receive_Issues_Goods.Models.Weekday", b =>
                {
                    b.Navigation("Plandetailreceivedtlips");
                });
#pragma warning restore 612, 618
        }
    }
}
